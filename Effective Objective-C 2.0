
Effective Objective-C 2.0   编写高质量ios于os x代码的52个有效方法
本文主要是简单记录一下Effective Objective-C这本书中的一些知识点，方便查看。

主要内容包括：
-优化objective-c对象之间的互动与关系。
-掌握接口与api的设计原则，写出令开发者用起来得心应手的类。
-善用协议与分类，编写便于维护且不易出现bug的代码。
-在自动引用计数（ARC）环境下避免内存泄漏。
-用“块”与“大中枢派发（GCD）”编写呈模块化且功能强大的代码。
-理解objective-c中的协议于其它编程语言中的多继承有何区别，并掌握协议的用法。  
-通过数字、字典、set等collection对象来提高代码性能。
-揭示cocoa于cocoa touch框架的强大之处。

章节目录

第1章-熟悉object-c
通论该语言的核心概念。
1.了解OC语言的起源
--OC为C语言添加了面向对象特性，是其超集。OC使用动态绑定的消息结构，也就是说，在运行时才会检查对象类型。接收一条消息之后，究竟应该执行何种代码，由运行期环境而非编译器来决定。--理解C语言的核心概念有助于写好OC程序。尤其要掌握内存模型与指针。
2.在类的头文件中尽量少引入其他头文件
--除非确有必要，否则不要引入头文件。一般来说，应该在某个类的头文件中使用向前声明来提及别的类，
并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合（coupling）。
--有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把“该类遵循某协议”的这条声明移至“class-continuation分类”中。
如果不行的话，就把协议单独放在一个头文件中，然后将其引用。
3.多用字面语法，少用于之等价的方法
--应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。
--应该通过取下标操作来访问数组下标或字典中的键所对应的元素。
--用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。
4.多用类型常量，少用#define预处理指令
--不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只会在编译前据此执行查找与替换操作。
即使有人重新定义了常量值，编译器也不会产生警告信息，这将导致应用程序中的常量值不一致。
--在实现文件中使用static const来定义“只在编译单元内可见的常量”（translation-unit-specific constant）。
由于此类常量不在全局符合表中，所以无须为其名称加前缀。
--在头文件中使用extern来声明全局常量，并在相关实现文件中定义其值。
这种常量要出现在全局符合表中，所以其名称应该加以区隔，通常用与之相关的类名做前缀。
5.用枚举表示状态、选项、状态码
--应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。
--如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各个选项值定义为2的幂，以便通过按位或操作将其组合起来。
--用NS_ENUM与NS_OPTIONS宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。
--在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所以枚举。

第2章-对象、消息、运行期
对象直接能够关联于交互，这是面向对象语言的重要特征。
本章讲述这些特征，并深入研究代码在运行期的行为。

6.理解“熟悉”这一概念
--可以用@property语法来定义对象中所封装的数据。
--通过“特质”来制定存储数据所需要的正确语义。
--在设置属性所对应的实例变量时，一定要遵从该属性所声明的语义。
--开发iOS程序时应该使用nonatomic属性，因为atomic属性会严重影响性能。
7.在对象内部尽量直接访问实例变量
--在对象内部读取数据是，应该直接通过实例变量来读，而写入数据时，则应该通过属性来写。
--在初始化方法及dealloc方法中，总是应该直接通过实例变量来读写数据。
--有时会使用惰性初始化技术配置某份数据，这种情况下，需要通过属性来读取数据。
8.理解“对象等同性”这一概念
--若想要检测对象的等同性，请提供“isEqual：”与hash方法。
--相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未必相同。
--不要盲目地逐个检测每条属性，但是应该依照具体需求来制定检测方案。
--编写hash方法时，应该使用计算速度快而且哈希码碰撞几率低的算法。
9.以“类族模式”隐藏实现细节

--类族模式可以把实现细节隐藏在一套简单的公共接口后面。
--系统框架中经常使用类族。
--从类族的公共抽象基类中继承子类时要当心，若有开发文档，则应首先阅读。
10.在既有类中使用关联对象存放自定义数据
--可以通过“关联对象”机制来把两个对象连起来。
--定义关联对象时可指定内存管理语义，用模仿定义属性时采用的“拥有关系”与“非拥有关系”。
--只有在其他做法不可行时才选用关联对象，因为这种做法通常会引入难于查找的bug。
11.理解objc_msgSend的作用
--消息由接受者、选择子及参数构成。给某个对象“发送消息”（invoke a message）也就相当于在该对象上“调用方法”（call a method）。
--发给某对象的全部消息都要由“动态消息派发系统”（dynamic message dispatch system）来处理，该系统会查找出对应的方法，并执行其代码。
12.理解消息转发机制
--若对象无法响应某个选择子，则进入消息转发流程。
--通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。
--对象可以把其无法解读的某个选择子转交给其他对象来处理。
--经过上述两步之后，如果还是没有办法处理选择子，那就启动完整的消息转发机制。
13.用“方法调配技术”调试
--在运行期，可以向类中新增或替换选择子所对应的方法实现。
--使用另一份实现来替换原有的方法实现，这到工序叫做“方法调配”，开发者常用此技术向原有实现中添加新功能。
--一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用。
14.理解“类对象”的用意
--每个实例都有一个指向class对象的指针，用以表明其类型，而这些class对象则构成了类的继承体系。
--如果对象类型无法在编译期确定，那么就应该使用类型信息查询方法来探知。
--尽量使用类型信息查询方法来确定对象类型，而不用直接比较类对象，因为某些对象可能实现了消息转发功能。

第3章-接口于api设计
很少有那种写完就不再复用的代码。即使代码不向更多人公开，也依然有可能用在自己的多个项目中。
本章讲解如何编写与OC搭配得宜的类。
15.用前缀避免命名空间冲突
16.提供“全能初始化方法”
--在类中提供一个全能初始化方法，并于文档里指明。其他初始化方法均应调用此方法。
--若全能初始化方法与超类不同，则需覆写超类中的对应方法。
--如果超类的初始化方法不使用于子类，那么应该覆写这个超类方法，并在其中抛出异常。
17.实现description方法
--实现description方法返回一个有意义的字符串，用以描述该实例。
--若想在调试时打印出更详尽的对象描述信息，则应该实现debugDescription方法。
18.尽量使用不可变对象
--尽量创建不可变的对象。
--若某属性仅可用于对象内部修改，则在“class-continuation分类”中将其由readonly属性扩展为readwrite属性。
--不要把可变的collection作为属性公开，而应该提高相关方法，以此修改对象中的可变collection。
19.使用清晰而协调的命名方式
--起名时应遵从标准的OC命名规范，这样创建出来的接口更容易为开发者所理解。
--方法名要言简意赅，从左至右读起来像个日常用语中的句子才好。
--方法名里不要使用缩略后的类型名称。
--给方法起名时的第一要务就是确保其风格与你自己的代码或所要集成的框架相符。
20.为私有方法命名加前缀
--给私有方法的名称加上前缀，这样可以很容易的将其同公共方法区分开。
--不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。
21.理解OC错误模型
--只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。
--在错误不那么严重的情况下，可以指派“委托方法”（delegate method）来处理错误，
也可以把错误信息放在NSError对象里，经由“输出参数”返回给调用者。
22.理解NSCopying协议
--若想令自己所写的对象具有拷贝功能，则需实现NSCopying协议。
--如果自定义的对象分为可变版本与不可变版本，那么就要同时实现NSCopying与NSMutableCopying协议。
--复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应该尽量执行浅拷贝。
--如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。

第4章-协议与分类
协议与分类是两个需要掌握的重要语言特性。若运用得当，则可令代码易读、易维护且少出错。
本章将帮助读者精通这两个概念。
23.通过委托于数据源协议进行对象间通信
24.将类的实现代码分散到便于管理的数个分类之中
25.总是为第三方类的分类名称加前缀
26.勿在分类中声明属性
27.使用“class-continuation 分类”隐藏实现细节
28.通过协议提供匿名对象

第5章-内存管理
OC语言以引用计数来管理内存，这令许多初学者纠结，要是用过以“垃圾收集器”（garbage collector）来管理内存的语言，
那么更会如此。“自动引用计数”机制缓解了此问题，不过使用时有很多重要的注意事项，以确保对象模型正确，不致内存泄漏。
本章提醒读者注意内存管理中易犯的错误。
29.理解引用计数
30.以ARC简化引用计数
31.在dealloc方法中只释放引用并解除监听
32.编写“异常安全代码”时留意内存管理问题
33.以弱引用避免保留环
34.以“自动释放池块”降低内存峰值
35.用“僵尸对象”调试内存管理问题
36.不要使用retainCount

第6章-块与大中枢派发
苹果公司引入了“块”这一概念，其语法类似于C语言扩展中的“闭包”（closure）。
在OC语言中，我们通常用块来实现一些原来需要很多样板代码才能完成的事情，
块还能实现“代码分离”（code separation）。“大中枢派发”（Grand Central Dispatch，GCD）提供了一套用于多线程环境的简单接口。
“块”可视为GCD的任务，根据系统资源状况，这些任务也许能并发执行。
本章将教会读者如何充分运用这两项核心技术。
37.理解“块”这一概念
38.为常用的块类型创建typedef
39.用handler块降低代码分散程度
40.用块引用其所属对象时不要出现保留环
41.多用派发队列，少用同步锁
42.多用GCD，少用performSelector系列方法
43.掌握GCD及操作队列的使用时机
44.通过Dispatch Group机制，根据系统资源状况来执行任务
45.使用dispatch_once来执行只需要运行一次的线程安全代码
46.不要使用dispatch_get_current_queue

第7章-系统框架
大家通常会用OC来开发mac os x或ios程序。在这两种情况下都有一套完整的系统框架可供使用，前者名为cocoa，后者名为cocoa touch。
本章将总览这些框架，并深入研究其中某些类。
47.熟悉系统框架
48.多用块枚举，少用for循环
49.对自定义其内存管理语义的collection使用无缝桥接
50.构建缓存时选用NSCache而非NSDictionary
51.精简initialize与load是实现代码
52.别忘了NSTimer会保留其目标对象
