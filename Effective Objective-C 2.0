Effective Objective-C 2.0   编写高质量ios于os x代码的52个有效方法
本文主要是简单记录一下Effective Objective-C这本书中的一些知识点，方便查看。

主要内容包括：
-优化objective-c对象之间的互动与关系。
-掌握接口与api的设计原则，写出令开发者用起来得心应手的类。
-善用协议与分类，编写便于维护且不易出现bug的代码。
-在自动引用计数（ARC）环境下避免内存泄漏。
-用“块”与“大中枢派发（GCD）”编写呈模块化且功能强大的代码。
-理解objective-c中的协议于其它编程语言中的多继承有何区别，并掌握协议的用法。  
-通过数字、字典、set等collection对象来提高代码性能。
-揭示cocoa于cocoa touch框架的强大之处。

章节目录

第1章-熟悉object-c
通论该语言的核心概念。
1.了解OC语言的起源
2.在类的头文件中尽量少引入其他头文件
3.多用字面语法，少用于之等价的方法
4.多用类型常量，少用#define预处理指令
5.用枚举表示状态、选项、状态码

第2章-对象、消息、运行期
对象直接能够关联于交互，这是面向对象语言的重要特征。
本章讲述这些特征，并深入研究代码在运行期的行为。
6.理解“熟悉”这一概念
7.在对象内部尽量直接访问实例变量
8.理解“对象等同性”这一概念
9.以“类族模式”隐藏实现细节
10.在既有类中使用关联对象存放自定义数据
11.理解objc_msgSend的作用
12.理解消息转发机制
13.用“方法调配技术”调试
14.理解“类对象”的用意

第3章-接口于api设计
很少有那种写完就不再复用的代码。即使代码不向更多人公开，也依然有可能用在自己的多个项目中。
本章讲解如何编写与OC搭配得宜的类。
15.用前缀避免命名空间冲突
16.提供“全能初始化方法”
17.实现description方法
18.尽量使用不可变对象
19.使用清晰而协调的命名方式
20.为私有方法命名加前缀
21.理解OC错误模型
22.理解NSCopying协议

第4章-协议与分类
协议与分类是两个需要掌握的重要语言特性。若运用得当，则可令代码易读、易维护且少出错。
本章将帮助读者精通这两个概念。
23.通过委托于数据源协议进行对象间通信
24.将类的实现代码分散到便于管理的数个分类之中
25.总是为第三方类的分类名称加前缀
26.勿在分类中声明属性
27.使用“class-continuation 分类”隐藏实现细节
28.通过协议提供匿名对象

第5章-内存管理
OC语言以引用计数来管理内存，这令许多初学者纠结，要是用过以“垃圾收集器”（garbage collector）来管理内存的语言，
那么更会如此。“自动引用计数”机制缓解了此问题，不过使用时有很多重要的注意事项，以确保对象模型正确，不致内存泄漏。
本章提醒读者注意内存管理中易犯的错误。
29.理解引用计数
30.以ARC简化引用计数
31.在dealloc方法中只释放引用并解除监听
32.编写“异常安全代码”时留意内存管理问题
33.以弱引用避免保留环
34.以“自动释放池块”降低内存峰值
35.用“僵尸对象”调试内存管理问题
36.不要使用retainCount

第6章-块与大中枢派发
苹果公司引入了“块”这一概念，其语法类似于C语言扩展中的“闭包”（closure）。
在OC语言中，我们通常用块来实现一些原来需要很多样板代码才能完成的事情，
块还能实现“代码分离”（code separation）。“大中枢派发”（Grand Central Dispatch，GCD）提供了一套用于多线程环境的简单接口。
“块”可视为GCD的任务，根据系统资源状况，这些任务也许能并发执行。
本章将教会读者如何充分运用这两项核心技术。
37.理解“块”这一概念
38.为常用的块类型创建typedef
39.用handler块降低代码分散程度
40.用块引用其所属对象时不要出现保留环
41.多用派发队列，少用同步锁
42.多用GCD，少用performSelector系列方法
43.掌握GCD及操作队列的使用时机
44.通过Dispatch Group机制，根据系统资源状况来执行任务
45.使用dispatch_once来执行只需要运行一次的线程安全代码
46.不要使用dispatch_get_current_queue

第7章-系统框架
大家通常会用OC来开发mac os x或ios程序。在这两种情况下都有一套完整的系统框架可供使用，前者名为cocoa，后者名为cocoa touch。
本章将总览这些框架，并深入研究其中某些类。
47.熟悉系统框架
48.多用块枚举，少用for循环
49.对自定义其内存管理语义的collection使用无缝桥接
50.构建缓存时选用NSCache而非NSDictionary
51.精简initialize与load是实现代码
52.别忘了NSTimer会保留其目标对象
