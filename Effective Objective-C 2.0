
Effective Objective-C 2.0   编写高质量ios于os x代码的52个有效方法
本文主要是简单记录一下Effective Objective-C这本书中的一些知识点，方便查看。

主要内容包括：
-优化objective-c对象之间的互动与关系。
-掌握接口与api的设计原则，写出令开发者用起来得心应手的类。
-善用协议与分类，编写便于维护且不易出现bug的代码。
-在自动引用计数（ARC）环境下避免内存泄漏。

-用“块”与“大中枢派发（GCD）”编写呈模块化且功能强大的代码。
-理解objective-c中的协议于其它编程语言中的多继承有何区别，并掌握协议的用法。  
-通过数字、字典、set等collection对象来提高代码性能。
-揭示cocoa于cocoa touch框架的强大之处。

章节目录

第1章-熟悉object-c
通论该语言的核心概念。
1.了解OC语言的起源
--OC为C语言添加了面向对象特性，是其超集。OC使用动态绑定的消息结构，也就是说，在运行时才会检查对象类型。接收一条消息之后，究竟应该执行何种代码，由运行期环境而非编译器来决定。--理解C语言的核心概念有助于写好OC程序。尤其要掌握内存模型与指针。
2.在类的头文件中尽量少引入其他头文件
--除非确有必要，否则不要引入头文件。一般来说，应该在某个类的头文件中使用向前声明来提及别的类，
并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合（coupling）。
--有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把“该类遵循某协议”的这条声明移至“class-continuation分类”中。
如果不行的话，就把协议单独放在一个头文件中，然后将其引用。
3.多用字面语法，少用于之等价的方法
--应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。
--应该通过取下标操作来访问数组下标或字典中的键所对应的元素。
--用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。
4.多用类型常量，少用#define预处理指令
--不要用预处理指令定义常量。这样定义出来的常量不含类型信息，编译器只会在编译前据此执行查找与替换操作。
即使有人重新定义了常量值，编译器也不会产生警告信息，这将导致应用程序中的常量值不一致。
--在实现文件中使用static const来定义“只在编译单元内可见的常量”（translation-unit-specific constant）。
由于此类常量不在全局符合表中，所以无须为其名称加前缀。
--在头文件中使用extern来声明全局常量，并在相关实现文件中定义其值。
这种常量要出现在全局符合表中，所以其名称应该加以区隔，通常用与之相关的类名做前缀。
5.用枚举表示状态、选项、状态码
--应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。
--如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各个选项值定义为2的幂，以便通过按位或操作将其组合起来。
--用NS_ENUM与NS_OPTIONS宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。
--在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所以枚举。

第2章-对象、消息、运行期
对象直接能够关联于交互，这是面向对象语言的重要特征。
本章讲述这些特征，并深入研究代码在运行期的行为。

6.理解“熟悉”这一概念
--可以用@property语法来定义对象中所封装的数据。
--通过“特质”来制定存储数据所需要的正确语义。
--在设置属性所对应的实例变量时，一定要遵从该属性所声明的语义。
--开发iOS程序时应该使用nonatomic属性，因为atomic属性会严重影响性能。
7.在对象内部尽量直接访问实例变量
--在对象内部读取数据是，应该直接通过实例变量来读，而写入数据时，则应该通过属性来写。
--在初始化方法及dealloc方法中，总是应该直接通过实例变量来读写数据。
--有时会使用惰性初始化技术配置某份数据，这种情况下，需要通过属性来读取数据。
8.理解“对象等同性”这一概念
--若想要检测对象的等同性，请提供“isEqual：”与hash方法。
--相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未必相同。
--不要盲目地逐个检测每条属性，但是应该依照具体需求来制定检测方案。
--编写hash方法时，应该使用计算速度快而且哈希码碰撞几率低的算法。
9.以“类族模式”隐藏实现细节

--类族模式可以把实现细节隐藏在一套简单的公共接口后面。
--系统框架中经常使用类族。
--从类族的公共抽象基类中继承子类时要当心，若有开发文档，则应首先阅读。
10.在既有类中使用关联对象存放自定义数据
--可以通过“关联对象”机制来把两个对象连起来。
--定义关联对象时可指定内存管理语义，用模仿定义属性时采用的“拥有关系”与“非拥有关系”。
--只有在其他做法不可行时才选用关联对象，因为这种做法通常会引入难于查找的bug。
11.理解objc_msgSend的作用
--消息由接受者、选择子及参数构成。给某个对象“发送消息”（invoke a message）也就相当于在该对象上“调用方法”（call a method）。
--发给某对象的全部消息都要由“动态消息派发系统”（dynamic message dispatch system）来处理，该系统会查找出对应的方法，并执行其代码。
12.理解消息转发机制
--若对象无法响应某个选择子，则进入消息转发流程。
--通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。
--对象可以把其无法解读的某个选择子转交给其他对象来处理。
--经过上述两步之后，如果还是没有办法处理选择子，那就启动完整的消息转发机制。
13.用“方法调配技术”调试
--在运行期，可以向类中新增或替换选择子所对应的方法实现。
--使用另一份实现来替换原有的方法实现，这到工序叫做“方法调配”，开发者常用此技术向原有实现中添加新功能。
--一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用。
14.理解“类对象”的用意
--每个实例都有一个指向class对象的指针，用以表明其类型，而这些class对象则构成了类的继承体系。
--如果对象类型无法在编译期确定，那么就应该使用类型信息查询方法来探知。
--尽量使用类型信息查询方法来确定对象类型，而不用直接比较类对象，因为某些对象可能实现了消息转发功能。

第3章-接口于api设计
很少有那种写完就不再复用的代码。即使代码不向更多人公开，也依然有可能用在自己的多个项目中。
本章讲解如何编写与OC搭配得宜的类。
15.用前缀避免命名空间冲突
--可以用@property语法来定义对象中所封装的数据。
--通过“特质”来制定存储数据所需要的正确语义。
--在设置属性所对应的实例变量时，一定要遵从该属性所声明的语义。
16.提供“全能初始化方法”
--在类中提供一个全能初始化方法，并于文档里指明。其他初始化方法均应调用此方法。
--若全能初始化方法与超类不同，则需覆写超类中的对应方法。
--如果超类的初始化方法不使用于子类，那么应该覆写这个超类方法，并在其中抛出异常。
17.实现description方法
--实现description方法返回一个有意义的字符串，用以描述该实例。
--若想在调试时打印出更详尽的对象描述信息，则应该实现debugDescription方法。
18.尽量使用不可变对象
--尽量创建不可变的对象。
--若某属性仅可用于对象内部修改，则在“class-continuation分类”中将其由readonly属性扩展为readwrite属性。
--不要把可变的collection作为属性公开，而应该提高相关方法，以此修改对象中的可变collection。
19.使用清晰而协调的命名方式
--起名时应遵从标准的OC命名规范，这样创建出来的接口更容易为开发者所理解。
--方法名要言简意赅，从左至右读起来像个日常用语中的句子才好。
--方法名里不要使用缩略后的类型名称。
--给方法起名时的第一要务就是确保其风格与你自己的代码或所要集成的框架相符。
20.为私有方法命名加前缀
--给私有方法的名称加上前缀，这样可以很容易的将其同公共方法区分开。
--不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。
21.理解OC错误模型
--只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。
--在错误不那么严重的情况下，可以指派“委托方法”（delegate method）来处理错误，
也可以把错误信息放在NSError对象里，经由“输出参数”返回给调用者。
22.理解NSCopying协议
--若想令自己所写的对象具有拷贝功能，则需实现NSCopying协议。
--如果自定义的对象分为可变版本与不可变版本，那么就要同时实现NSCopying与NSMutableCopying协议。
--复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应该尽量执行浅拷贝。
--如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。

第4章-协议与分类
协议与分类是两个需要掌握的重要语言特性。若运用得当，则可令代码易读、易维护且少出错。
本章将帮助读者精通这两个概念。
23.通过委托于数据源协议进行对象间通信
--委托模式为对象提供了一套接口，使其可由此将相关事件告知其他对象。
--将委托对象应该支持的接口定义成协议，在协议中把可能需要处理的事件定义成方法。
--当某对象需要从另外一个对象中获取数据时，可以使用委托模式。这种情况下，该模式亦称“数据源协议”（data source protocal）。
--若有必要，可实现含有位段的结构体，将委托对象是否能响应协议方法这一信息缓存至其中。
24.将类的实现代码分散到便于管理的数个分类之中
--使用分类机制把类的实现代码划分成易于管理的小块。
--将应该视为“私有”的方法归入名叫private的分类中，以隐藏实现细节。
25.总是为第三方类的分类名称加前缀
--向第三方类中添加分类时，总应该给其名称加上你的专用前缀。
--向第三方类中添加分类时，总应该给其中的方法名加上你的专用前缀。
26.勿在分类中声明属性
--把封装数据所用的全部属性都定义在主接口里。
--在“class-continuation 分类”之外的其他分类中，可以定义存取方法，单尽量不要定义属性。
27.使用“class-continuation 分类”隐藏实现细节
--通过“class-continuation 分类”向类中新增实例变量。
--如果某属性在主接口中声明为“只读”，而类的内部又要用设置方法修改此属性，
那么就在“class-continuation 分类”中将其扩展为“可读写”。
--把私有方法的原型声明在“class-continuation 分类”里面。
--若想使类所遵循的协议不为人所知，则可于“class-continuation 分类”中声明。
28.通过协议提供匿名对象
--协议可在某种程度上提供匿名类型。具体的对象类型可于淡化成遵从某协议的id类型，协议里面规定了对象所应该实现的方法。
--使用匿名对象来隐藏类型名称（或类名）。
--如果具体类型不重要，重要的是对象能够响应（定义在协议里的）特定方法，那么可使用匿名对象来表示。

第5章-内存管理
OC语言以引用计数来管理内存，这令许多初学者纠结，要是用过以“垃圾收集器”（garbage collector）来管理内存的语言，
那么更会如此。“自动引用计数”机制缓解了此问题，不过使用时有很多重要的注意事项，以确保对象模型正确，不致内存泄漏。
本章提醒读者注意内存管理中易犯的错误。
29.理解引用计数
--引用计数机制通过可以递增递减的计数器来管理内存。对象创建好之后，其保留计数至少为1。
若保留计数为正，则对象继续存活。当保留计数降为0时，对象就被销毁了。
--在对象生命期中，其余对象通过引用来保留或释放对象。保留与释放操作分别会递增及递减保留计数。
30.以ARC简化引用计数
--ARC管理对象生命期的办法基本上就是：在合适的地方插入“保留”及“释放”操作。
在ARC环境下，变量的内存管理语义可以通过修饰符指明，而原来则需要手工执行“保留”及“释放”操作。
--由方法所返回的对象，其内存管理语义总是通过方法名来体现。ARC将此确定为开发者必须遵守的规则。
--ARC只负责管理OC对象的内存。尤其要注意：CoreFoundation对象不归ARC管理，开发者必须适时调用CFRetain/CFRelease。
31.在dealloc方法中只释放引用并解除监听
--在dealloc方法里，应该做的事情就是释放指向其他对象的引用，并取消原来订阅的“键值观测”（KVO）或NSNotification等通知，不要做其他事情。
--如果对象持有文件描述符等系统资源，那么应该专门编写一个方法来释放此种资源。
这样的类要和其使用者约定：用完资源后必须调用close方法。
--执行异步任务的方法不应该在dealloc里调用；只能在正常状态下执行的那些方法也不应在dealloc里调用，
因为此时对象已处于正在回收的状态了。
32.编写“异常安全代码”时留意内存管理问题
--捕获异常时，一定要注意将try块内所创立的对象清理干净。
--在默认情况下，ARC不生成安全处理异常所需要的清理代码。
开启编译器标志后，可生成这种代码，不过会导致应用程序变大，而且会降低运行效率。
33.以弱引用避免保留环
--将某些引用设为weak，可避免出现“保留环”。
--weak引用可以自动清空，也可以不自动清空。自动清空（autonilling）是随着ARC而引入的新特性，由运行期系统来实现。
在具备自动清空功能的弱引用上，可以随意读取其数据，因为这种引用不会指向已经回收过的对象。
34.以“自动释放池块”降低内存峰值
--自动释放池在栈中，对象收到autorelease消息后，系统将其放入最顶端的池里。
--合理运用自动释放池，可降低应用程序的内存峰值。
--@autoreleasepool这种新式写法能创建出更为轻便的自动释放池。
35.用“僵尸对象”调试内存管理问题
--系统在回收对象时，可以不将其真的回收，而是把它转化为僵尸对象。通过环境变量NSZombieEnabled可开启此功能。
--系统会修改对象的isa指针，令其指向特殊的僵尸类，从而使该对象变为僵尸对象。
僵尸类能够响应所有的选择子，响应方式为：打印一条包含消息内容及其接收者的消息，然后终止应用程序。
36.不要使用retainCount
--对象的保留计数看似有用，实则不然，因为任何给定时间点上的“绝对保留计数”（absolute retain count）都无法反映对象生命周期的全貌。
--引入ARC之后，retainCount方法就正式废止了，在ARC下调用该方法会导致编译器报错。

第6章-块与大中枢派发
苹果公司引入了“块”这一概念，其语法类似于C语言扩展中的“闭包”（closure）。
在OC语言中，我们通常用块来实现一些原来需要很多样板代码才能完成的事情，
块还能实现“代码分离”（code separation）。“大中枢派发”（Grand Central Dispatch，GCD）提供了一套用于多线程环境的简单接口。
“块”可视为GCD的任务，根据系统资源状况，这些任务也许能并发执行。
本章将教会读者如何充分运用这两项核心技术。
37.理解“块”这一概念
--块是C、C++、Objective-C中的词法闭包。
--块可接受参数，也可以返回值。
--块可以分配在栈或堆上，也可以是全局的。分配在栈上的块可拷贝到堆里，这样的话，就和标准的OC对象一样，具备引用计数了。
38.为常用的块类型创建typedef
--以typedef重新定义块类型，可令块变量用起来更加简单。
--定义新类型时应遵从现有的命名习惯，勿使其名称与别的类型相冲突。
--不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名，
那么只需要修改相应typedef中的块签名即可，无须改动其他typedef。
39.用handler块降低代码分散程度
--在创建对象时，可以使用内联的handler块将相关业务逻辑一并声明。
--在有多个实例需要监控时，如果采用委托模式，那么经常需要根据传入的对象来切换，

而若改用handler块来实现，则可直接将块与相关对象放在一起。
--设计API时如果用到了handler块，那么可以增加一个参数，使调用者可通过此参数来决定应该把块安排在哪个队列上执行。
40.用块引用其所属对象时不要出现保留环
--如果块所捕获的对象直接或间接地保留了块本身，那么就得当心保留环问题。
--一定要找个适当的时机解除保留环，而不能把责任推给API的调用者。

41.多用派发队列，少用同步锁
--派发队列可用来表述同步语义（synchronization semantic），这种做法要比使用@synchronized块或NSLock对象更简单。
--将同步与异步派发结合起来，可以实现与普通加锁机制一样的同步行为，而这么做却不会阻塞执行异步派发的线程。
--使用同步队列及栅栏块，可以令同步行为更加高效。
42.多用GCD，少用performSelector系列方法

--performSelector系列方法在内存管理方面容易有疏失。它无法确定将要执行的选择子具体是什么，
因而ARC编译器也就无法插入适当的内存管理方法。
--performSelector系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都受到限制。
--如果想把任务放在另一个线程上执行，那么最好不要用performSelector系列方法，
而是应该把任务封装到块里，然后调用GCD的相关方法来实现。
43.掌握GCD及操作队列的使用时机
--在解决多线程与任务管理问题时，派发队列并非唯一方案。
--操作队列提供了一套高层的OC API，能实现纯GCD所具备的绝大部分功能，
而且还能完成一些更为复杂的操作，那些操作若改用GCD来实现，则需另外编写代码。
44.通过Dispatch Group机制，根据系统资源状况来执行任务
--一系列任务可归入一个dispatch group之中。开发者可以在这组任务执行完毕时获得通知。
--通过dispatch group，可以在并发式派发队列里同时执行多项任务。此时GCD会根据系统资源状况来调度这些并发执行的任务。
开发者若自己来实现此功能，则需编写大量代码。
45.使用dispatch_once来执行只需要运行一次的线程安全代码
--经常需要编写“只需要执行一次的线程安全代码”（thread-safe single-code execution）。
通过GCD所提供的dispatch_once函数，很容易就能实现此功能。
--标记应该声明在static或global作用域中，这样的话，在把只需要执行一次的块传给dispatch_once函数时，传进去的标记也是相同的。
46.不要使用dispatch_get_current_queue
--dispatch_get_current_queue函数的行为常常与开发者所预期的不同。此函数已经废弃，只应做调试之用。
--由于派发队列是按层级来组织的，所以无法单用某个队列对象来描述“当前队列”这一概念。
--dispatch_get_current_queue函数用于解决由不可重入的代码所引发的死锁，
然而能用此函数解决的问题，通常也能改用“队列特定数据”来解决

第7章-系统框架
大家通常会用OC来开发mac os x或ios程序。在这两种情况下都有一套完整的系统框架可供使用，前者名为cocoa，后者名为cocoa touch。
本章将总览这些框架，并深入研究其中某些类。
47.熟悉系统框架
--许多系统框架都可以直接使用。其中最重要的是Foundation与CoreFoundation，
这两个框架提供了构建应用程序所需的许多核心功能。
--很多常见任务都能用框架来做，例如音频与视频处理、网络通信、数据管理等。
--请记住：用纯C写成的框架与OC写成的一样重要，若想成为优秀的OC开发者，应该掌握C语言的核心概念。
48.多--遍历collection有四种方式。最基本的办法是for循环，其次是NSEnumeration遍历法及快速遍历法，最新、最先进的方式则是“块枚举法”。
--“块枚举法”本身就能通过GCD来并发执行遍历操作，无须另行编写代码。而采用其他遍历方式则无法轻易实现这一点。
--若提前知道带遍历的collection含有何种对象，则应修改块签名，指出对象的具体类型。用块枚举，少用for循环
49.对自定义其内存管理语义的collection使用无缝桥接
--通过无缝桥接技术，可以在Foundation框架中的OC对象与CoreFoundation框架中的C语言数据结构之间来回转换。
--在CoreFoundation层面创建collection时，可以指定许多回调函数，这些函数表示此collection应如何处理其元素。
然后，可运用无缝桥接技术，将其转换成具备特殊内存管理语义的OC collection。
50.构建缓存时选用NSCache而非NSDictionary
--实现缓存时应选用NSCache而非NSDictionary对象。因为NSCache可以提供优雅的自动删减功能，而且是“线程安全的”，它与字典不同，并不会拷贝键。
--可以给NSCache对象设置上限，用以限制缓存中的对象总个数及“总成本”，而这些尺度定义了缓存删减其中对象的时机。
但是绝对不要把这些尺度当成可靠的“硬限制”（hard limit），它们仅对NSCache起指导作用。
--将NSPurgeableData与NSCache搭配使用，可实现自动清除数据的功能，也就是说，当NSPurgeableData对象所占内存为系统所丢弃时，
该对象自身也会从缓存中移除。
--如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种“重新计算起来很费事的”数据，才值得放入缓存，
比如那些需要从网络获取或从磁盘读取的数据。
51.精简initialize与load是实现代码
--在加载阶段，如果类实现了load方法，那么系统就会调用它。分类里也可以定义此方法，类的load方法要比分类的先调用。
与其他方法不同，load方法不参与覆写机制。
--首次使用某个类之前，系统会向其中发送initialize消息。由于此方法遵从普通的覆写规则，
所以通常应该在里面判断当前要初始化的是哪个类。
--load与initialize方法都应该实现得精简一些，这有助于保持应用程序的响应能力，也能减少引入“依赖环”(interdependency cycle)的几率。
--无法在编译期设定的全局常量，可以放在initialize方法里初始化。
52.别忘了--NSTimer对象会保留其目标，直到计时器本身失效为止，调用invalidate方法可令计时器失效，
另外，一次性的计时器在触发完任务之后也会失效。
--反复执行任务的计时器（repeating timer），很容易引入保留环，如果这种计时器的目标对象又保留了计时器本身，
那肯定会导致保留环。这种环状保留关系，可能是直接发生的，也可能是通过对象图里的其他对象间接发生的。
--可以扩充NSTimer的功能用“块”来打破保留环。不过，除非NSTmer将来在公共接口里提供此功能，
否则必须创建分类，将相关实现代码加入其中。NSTimer会保留其目标对象

